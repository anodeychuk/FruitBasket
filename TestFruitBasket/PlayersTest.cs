using FruitBasket.Model;
using FruitBasket.Players;
using FruitBasket.Referees;
using System;
using System.Collections.Generic;
using Xunit;

namespace TestFruitBasket
{
    /// <summary>
    /// The class intended for testing the players logic.
    /// </summary>
    public class PlayersTest
    {
        /// <summary>
        /// Checks whether the values generated by the random player belong to a range from 40 to 140.
        /// </summary>
        [Fact]
        public void RandomPlayerTest()
        {
            var Referee = new Referee();
            var PlayerFactory = new PlayerFactory();

            var RandomPlayer = PlayerFactory.CreatePlayer(
                name: "RandomPlayer",
                id: 1,
                playerType: Config.PlayersTypes.Random,
                referee: Referee);

            for (int i = 0; i < 1000; i++)
            {
                var number = RandomPlayer.Action();
                Assert.True((number >= Config.MinWeight) && (number <= Config.MaxWeight), "Numbers out of range");
            }
        }

        /// <summary>
        /// Checks whether the values generated by the memory player are unique
        /// and belong to a range from 40 to 140.
        /// <remarks>The uniqueness of values is checked against the keys of the dictionary collection.</remarks>
        /// </summary>
        [Fact]
        public void MemoryPlayerTest()
        {
            var Referee = new Referee();
            var PlayerFactory = new PlayerFactory();

            var MemoryPlayer = PlayerFactory.CreatePlayer(
                name: "MemoryPlayer",
                id: 1,
                playerType: Config.PlayersTypes.Memory,
                referee: Referee);

            Dictionary<int, int> numbers = new Dictionary<int, int>();

            bool isSameNum = false;
            for (int i = Config.MinWeight; i < Config.MaxWeight; i++)
            {
                try
                {
                    var number = MemoryPlayer.Action();
                    Assert.True((number >= Config.MinWeight) && (number <= Config.MaxWeight), "Numbers out of range");
                    numbers.Add(number, i);
                }
                catch (Exception)
                {
                    isSameNum = true;
                    break;
                }
            }

            Assert.True(isSameNum == false, "Numbers are not unique");
        }

        /// <summary>
        /// Checks whether the values generated by the thorough player are sequential
        /// and belong to a range from 40 to 140.
        /// </summary>
        [Fact]
        public void ThoroughPlayerTest()
        {
            var Referee = new Referee();
            var PlayerFactory = new PlayerFactory();

            var ThoroughPlayer = PlayerFactory.CreatePlayer(
                name: "ThoroughPlayer",
                id: 2,
                playerType: Config.PlayersTypes.Thorough,
                referee: Referee);

            int oldNumber = Config.MinWeight - 1;
            for (int i = Config.MinWeight; i < Config.MaxWeight + 1; i++)
            {
                var number = ThoroughPlayer.Action();
                Assert.True((number >= Config.MinWeight) && (number <= Config.MaxWeight), "Numbers out of range");
                Assert.True(number - oldNumber == 1, "The numbers are out of order");
                oldNumber = number;
            }
        }

        /// <summary>
        /// Checks whether the values generated by the cheater player are unique,
        /// belong to a range from 40 to 140, and are not duplicated with these of any other player participating in the game..
        /// <remarks>The uniqueness of values is checked against the keys of the dictionary collection.</remarks>
        /// </summary>
        [Fact]
        public void CheaterPlayerTest()
        {
            var Referee = new Referee();
            var PlayerFactory = new PlayerFactory();

            var ThoroughPlayer = PlayerFactory.CreatePlayer(
                name: "ThoroughPlayer",
                id: 1,
                playerType: Config.PlayersTypes.Thorough,
                referee: Referee);

            var CheaterPlayer = PlayerFactory.CreatePlayer(
                name: "CheaterPlayer",
                id: 2,
                playerType: Config.PlayersTypes.Cheater,
                referee: Referee);

            Dictionary<int, int> numbers = new Dictionary<int, int>();

            bool isSameNum = false;
            int i = 0;
            while (numbers.Count < Config.MaxWeight - Config.MinWeight)
            {
                try
                {
                    var number = ThoroughPlayer.Action();
                    try
                    {
                        numbers.Add(number, i);
                    }
                    catch (Exception) { }

                    // action contains a call cheating event
                    Referee.AddNumber(ThoroughPlayer.Id, number);

                    number = CheaterPlayer.Action();
                    Assert.True((number >= Config.MinWeight) && (number <= Config.MaxWeight), "Numbers out of range");
                    numbers.Add(number, i);
                }
                catch (Exception)
                {
                    isSameNum = true;
                    break;
                }
                i++;
            }

            Assert.True(isSameNum == false, "Numbers are not unique");
        }

        /// <summary>
        /// Checks whether the values generated by the thorough cheater player are sequential,
        /// belong to a range from 40 to 140, and are not duplicated with these of any other player participating in the game..
        /// </summary>
        [Fact]
        public void ThoroughCheaterPlayer()
        {
            var Referee = new Referee();
            var PlayerFactory = new PlayerFactory();

            var RandomPlayer = PlayerFactory.CreatePlayer(
                name: "RandomPlayer",
                id: 1,
                playerType: Config.PlayersTypes.Random,
                referee: Referee);

            var ThoroughCheater = PlayerFactory.CreatePlayer(
                name: "ThoroughCheater",
                id: 2,
                playerType: Config.PlayersTypes.ThoroughCheater,
                referee: Referee);

            Dictionary<int, int> numbers = new Dictionary<int, int>();

            bool isSameNum = false;
            int i = 0;
            while (numbers.Count < Config.MaxWeight - Config.MinWeight)
            {
                try
                {
                    var number = RandomPlayer.Action();
                    try
                    {
                        numbers.Add(number, i);
                    }
                    catch (Exception) { }

                    // action contains a call cheating event
                    Referee.AddNumber(RandomPlayer.Id, number);

                    number = ThoroughCheater.Action();
                    Assert.True((number >= Config.MinWeight) && (number <= Config.MaxWeight), "Numbers out of range");
                    numbers.Add(number, i);
                }
                catch (Exception)
                {
                    isSameNum = true;
                    break;
                }
                i++;
            }

            Assert.True(isSameNum == false, "Numbers are not unique");
        }
    }
}