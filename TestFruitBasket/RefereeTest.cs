using FruitBasket.Model;
using FruitBasket.Players;
using FruitBasket.Referees;
using System;
using System.Collections.Generic;
using Xunit;

namespace TestFruitBasket
{
    /// <summary>
    /// The class intended for testing the referee logic.
    /// </summary>
    public class RefereeTest
    {
        /// <summary>
        /// Checks whether the values generated by the random player belong to a range from 40 to 140.
        /// </summary>
        [Fact]
        public void SetRandomPlayerOrderTest()
        {
            var referee = GetReferee();

            referee.SetRandomPlayerOrder();

            bool isOrder = true;
            for (int i = 0; i < referee.Players.Count; i++)
            {
                if (referee.Players[i].Id != i)
                {
                    isOrder = false;
                    break;
                }
            }

            Assert.True(isOrder == false);
        }

        /// <summary>
        /// Checks that the winner is determined correctly.
        /// </summary>
        [Fact]
        public void GetWinnerTest()
        {
            var referee = GetReferee();

            for (int i = 0; i < 3; i++)
            {
                foreach (var player in referee.Players)
                {
                    referee.AddNumber(player.Id, referee.FruitBasketWeight + player.Id + i + 1);
                }
            }

            referee.AddNumber(referee.Players[2].Id, referee.FruitBasketWeight);

            var winner = referee.GetWinner(); 

            Assert.True(winner.playerName.Equals(referee.Players[2].Name));
        }

        /// <summary>
        /// Checks that the number of rounds to skip is determined correctly.
        /// </summary>
        [Fact]
        public void GetSkipRoundCountTest()
        {
            var referee = new Referee();

            referee.FruitBasketWeight = 100;

            Assert.True(referee.GetSkipRoundCount(70) == 2);

            Assert.True(referee.GetSkipRoundCount(130) == 2);
        }

        /// <summary>
        /// Gets a preset referee
        /// </summary>
        /// <returns>The referee with all types players</returns>
        internal Referee GetReferee()
        {
            var referee = new Referee();
            var playerFactory = new PlayerFactory();

            int i = 0;
            foreach (var playerType in Enum.GetValues(typeof(Config.PlayersTypes)))
            {
                referee.AddPlayer(
                    playerFactory.CreatePlayer(
                        name: playerType.ToString(),
                        id: i,
                        playerType: (Config.PlayersTypes)playerType,
                        referee: referee)
                    );
                i++;
            }

            return referee;
        }
    }
}